Description: [droidcamsrc] call droid_media_camera_take_picture from another thread
 take_picture call in HAL sometimes need to read information from preview
 frames for e.g. auto exposure when using flash. If the calling thread
 also handles pulling preview frames, this will create a deadlock.
Author: Ratchanan Srirattanamet <peathot@hotmail.com>
Forwarded: https://github.com/sailfishos/gst-droid/pull/39
Last-Update: 2019-10-04
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/gst/droidcamsrc/gstdroidcamsrcdev.c
+++ b/gst/droidcamsrc/gstdroidcamsrcdev.c
@@ -48,6 +48,7 @@
 
 struct _GstDroidCamSrcImageCaptureState
 {
+  gboolean running;
   gboolean image_preview_sent;
   gboolean image_start_sent;
   gboolean preview_image_requested;
@@ -579,6 +580,8 @@
 
   dev->viewfinder_format = GST_VIDEO_FORMAT_UNKNOWN;
 
+  dev->task_pool = gst_task_pool_new ();
+
   return dev;
 }
 
@@ -685,6 +688,9 @@
   g_mutex_clear (&dev->last_preview_buffer_lock);
   g_cond_clear (&dev->last_preview_buffer_cond);
 
+  gst_task_pool_cleanup (dev->task_pool);       // Just in case
+  gst_object_unref (dev->task_pool);
+
   g_slice_free (GstDroidCamSrcImageCaptureState, dev->img);
   g_slice_free (GstDroidCamSrcVideoCaptureState, dev->vid);
   g_slice_free (GstDroidCamSrcDev, dev);
@@ -696,6 +702,7 @@
 gst_droidcamsrc_dev_init (GstDroidCamSrcDev * dev)
 {
   GstStructure *config;
+  GError *err = NULL;
 
   GST_DEBUG ("dev init");
 
@@ -741,6 +748,13 @@
 
   g_rec_mutex_unlock (dev->lock);
 
+  gst_task_pool_prepare (dev->task_pool, &err);
+  if (err != NULL) {
+    GST_ERROR ("Failed to prepare thread pool: %s", err->message);
+    g_error_free (err);
+    return FALSE;
+  }
+
   return TRUE;
 }
 
@@ -757,6 +771,8 @@
   }
 
   g_rec_mutex_unlock (dev->lock);
+
+  gst_task_pool_cleanup (dev->task_pool);
 }
 
 gboolean
@@ -877,14 +893,36 @@
   return ret;
 }
 
+void
+_take_picture (gpointer user_data)
+{
+  GstDroidCamSrcDev *dev = (GstDroidCamSrcDev *) user_data;
+  GstDroidCamSrc *src = GST_DROIDCAMSRC (GST_PAD_PARENT (dev->imgsrc->pad));
+
+  const int msg_type = dev->c.CAMERA_MSG_SHUTTER | dev->c.CAMERA_MSG_RAW_IMAGE
+      | dev->c.CAMERA_MSG_POSTVIEW_FRAME | dev->c.CAMERA_MSG_COMPRESSED_IMAGE;
+
+  GST_DEBUG ("really calling droid_media_camera_take_picture");
+
+  g_rec_mutex_lock (dev->lock);
+
+  if (!droid_media_camera_take_picture (dev->cam, msg_type)) {
+    GST_ERROR ("error capturing image");
+    GST_ELEMENT_ERROR (src, LIBRARY, FAILED, (NULL), ("take_picture fails"));
+  }
+
+  dev->img->running = FALSE;
+
+  g_rec_mutex_unlock (dev->lock);
+}
+
 gboolean
 gst_droidcamsrc_dev_capture_image (GstDroidCamSrcDev * dev)
 {
   GstDroidCamSrc *src = GST_DROIDCAMSRC (GST_PAD_PARENT (dev->imgsrc->pad));
 
   gboolean ret = FALSE;
-  int msg_type = dev->c.CAMERA_MSG_SHUTTER | dev->c.CAMERA_MSG_RAW_IMAGE
-      | dev->c.CAMERA_MSG_POSTVIEW_FRAME | dev->c.CAMERA_MSG_COMPRESSED_IMAGE;
+  GError *err = NULL;
 
   GST_DEBUG ("dev capture image");
 
@@ -911,13 +949,27 @@
 
   g_rec_mutex_lock (dev->lock);
 
+  if (dev->img->running) {
+    GST_ERROR ("another capture is already in progress (?)");
+    goto out;
+  }
+
+  dev->img->running = TRUE;
   dev->img->image_preview_sent = FALSE;
   dev->img->image_start_sent = FALSE;
 
   dev->img->preview_image_requested = src->post_preview;
 
-  if (!droid_media_camera_take_picture (dev->cam, msg_type)) {
-    GST_ERROR ("error capturing image");
+  /*
+   * Call droid_media_camera_take_picture from another thread. take_picture
+   * call in HAL sometimes need to read information from preview frames for
+   * e.g. auto exposure when using flash. If the calling thread also handles
+   * pulling preview frames, this will create a deadlock.
+   */
+  gst_task_pool_push (dev->task_pool, _take_picture, dev, &err);
+  if (err) {
+    GST_ERROR ("Failed to start take_picture task: %s", err->message);
+    g_error_free (err);
     goto out;
   }
 
--- a/gst/droidcamsrc/gstdroidcamsrcdev.h
+++ b/gst/droidcamsrc/gstdroidcamsrcdev.h
@@ -62,6 +62,8 @@
 
   gboolean use_recorder;
   GstDroidCamSrcRecorder *recorder;
+
+  GstTaskPool *task_pool;
 };
 
 GstDroidCamSrcDev *gst_droidcamsrc_dev_new (GstDroidCamSrcPad *vfsrc,
